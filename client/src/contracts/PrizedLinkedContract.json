{
  "contractName": "PrizedLinkedContract",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.8+commit.23d335f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"author\":\"Brennan Fife\",\"details\":\"...\",\"methods\":{},\"title\":\"The PrizedLinkedContract.sol contract for DOXA\"},\"userdoc\":{\"methods\":{},\"notice\":\"...\"}},\"settings\":{\"compilationTarget\":{\"/Users/brenfife/Desktop/the-doxa-project/contracts/PrizedLinkedContract.sol\":\"PrizedLinkedContract\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/brenfife/Desktop/the-doxa-project/contracts/PrizedLinkedContract.sol\":{\"keccak256\":\"0xa1112673a2f5253d97f1bc941e25ccb24fe2b2040d63cde0a043d855c043978a\",\"urls\":[\"bzzr://0b01850fe2191edf2b3261acd8a75ba47fb977b7779b2fc1ea91868f8d4426af\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c68061005f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80638da5cb5b14602d575b600080fd5b60336075565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff168156fea165627a7a72305820c53b25846df453287190ea42259d6a010dbb0a4c18221396b5db8b816e640bc30029",
  "deployedBytecode": "0x6080604052348015600f57600080fd5b506004361060285760003560e01c80638da5cb5b14602d575b600080fd5b60336075565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff168156fea165627a7a72305820c53b25846df453287190ea42259d6a010dbb0a4c18221396b5db8b816e640bc30029",
  "sourceMap": "388:157:1:-;;;487:56;8:9:-1;5:2;;;30:1;27;20:12;5:2;487:56:1;526:10;518:5;;:18;;;;;;;;;;;;;;;;;;388:157;;;;;;",
  "deployedSourceMap": "388:157:1:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;388:157:1;;;;;;;;;;;;;;;;;;;441:20;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity ^0.5.0;\n\n// import 'https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol'; // Can also just create a safe math contract and import it\n// May use rhombus lighthouse here too\n// import \"./UniformRandomNumber.sol\";\n\n\n\n/**\n * @title The PrizedLinkedContract.sol contract for DOXA\n * @author Brennan Fife\n * @notice ...\n * @dev ...\n */\ncontract PrizedLinkedContract {\n    // VARIABLES\n    address public owner;\n\n    // CONSTRUCTOR\n    constructor() public {\n        owner = msg.sender;\n    }\n}\n\n/* contract PrizedLinkedContract {\n\n    // VARIABLES\n    address public owner;\n    address[] public entrants;\n    creationTime = now;\n    mapping (address => uint) savings; // amount of each savings\n    mapping (address => uint) entryMap; // list the number of entrants\n    uint pool = 0; // pool size\n    uint min = 10 finney; // 0.01 ether\n\n    // EVENTS\n    event addedEntry(address indexed saver, uint deposit, uint total); // Emitted when a saver is added to the pool\n    event withdraw(address indexed saver, uint savings); // Emitted when a saver withdraws\n    event checkSavings(States state); // Emitted when someone requests to know how much someone is saving...?\n\n    // MODIFIERS\n    modifier isOwner {\n        require(owner == msg.sender, \"Caller is not owner\");\n        _;\n    }\n\n    // CONSTRUCTOR\n    constructor() public {\n        owner = msg.sender;\n        creationTime = now;\n    }\n\n    // States of Contract:\n        //isOpen: Accepting\n        //payOut: Withdraw\n\n    enum States {\n        isOpen,  //0\n        payOut     //1\n    }\n\n    // FUNCTIONS\n\n    // When a new saver joins the pool, saver can add to deposit during isOpen\n    function addToPool() public payable atState(States.isOpen) {\n        require(msg.value >= min, \"Must submit at least the minimum amount\");\n        addEntrant(msg.sender);\n        pool = pool + msg.value;\n        savings[msg.sender] = savings[msg.sender] + msg.value;\n        emit addedEntry(msg.sender, msg.value, savings[msg.sender]);\n    }\n\n    // Add an entrant to the pool\n    function addEntrant (address entrant) private {\n        if (savings[entrant] == 0) {\n          //Only add to potential winners if current balance 0\n          entrants.push(entrant);\n          entryMap[entrant] = entrants.length - 1;\n        }\n        //else\n    }\n\n    function calcWinner() private view returns (address) {}\n\n    function endPool() public isOwner {\n        myEvent.isOpen = false;\n        uint balanceTransfered = myEvent.sales * TICKET_PRICE;\n        owner.transfer(balanceTransfered);\n        emit LogEndSale(owner, balanceTransfered);\n    }\n\n} */",
  "sourcePath": "/Users/brenfife/Desktop/the-doxa-project/contracts/PrizedLinkedContract.sol",
  "ast": {
    "absolutePath": "/Users/brenfife/Desktop/the-doxa-project/contracts/PrizedLinkedContract.sol",
    "exportedSymbols": {
      "PrizedLinkedContract": [
        70
      ]
    },
    "id": 71,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 58,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:1"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": "@title The PrizedLinkedContract.sol contract for DOXA\n@author Brennan Fife\n@notice ...\n@dev ...",
        "fullyImplemented": true,
        "id": 70,
        "linearizedBaseContracts": [
          70
        ],
        "name": "PrizedLinkedContract",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 60,
            "name": "owner",
            "nodeType": "VariableDeclaration",
            "scope": 70,
            "src": "441:20:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 59,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "441:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 68,
              "nodeType": "Block",
              "src": "508:35:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 66,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 63,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60,
                      "src": "518:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 64,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 85,
                        "src": "526:3:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 65,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "526:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "518:18:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 67,
                  "nodeType": "ExpressionStatement",
                  "src": "518:18:1"
                }
              ]
            },
            "documentation": null,
            "id": 69,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 61,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "498:2:1"
            },
            "returnParameters": {
              "id": 62,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "508:0:1"
            },
            "scope": 70,
            "src": "487:56:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 71,
        "src": "388:157:1"
      }
    ],
    "src": "0:2650:1"
  },
  "legacyAST": {
    "absolutePath": "/Users/brenfife/Desktop/the-doxa-project/contracts/PrizedLinkedContract.sol",
    "exportedSymbols": {
      "PrizedLinkedContract": [
        70
      ]
    },
    "id": 71,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 58,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:1"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": "@title The PrizedLinkedContract.sol contract for DOXA\n@author Brennan Fife\n@notice ...\n@dev ...",
        "fullyImplemented": true,
        "id": 70,
        "linearizedBaseContracts": [
          70
        ],
        "name": "PrizedLinkedContract",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 60,
            "name": "owner",
            "nodeType": "VariableDeclaration",
            "scope": 70,
            "src": "441:20:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 59,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "441:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 68,
              "nodeType": "Block",
              "src": "508:35:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 66,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 63,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 60,
                      "src": "518:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 64,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 85,
                        "src": "526:3:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 65,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "526:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "518:18:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 67,
                  "nodeType": "ExpressionStatement",
                  "src": "518:18:1"
                }
              ]
            },
            "documentation": null,
            "id": 69,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 61,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "498:2:1"
            },
            "returnParameters": {
              "id": 62,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "508:0:1"
            },
            "scope": 70,
            "src": "487:56:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 71,
        "src": "388:157:1"
      }
    ],
    "src": "0:2650:1"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.8+commit.23d335f2.Emscripten.clang"
  },
  "networks": {
    "5777": {
      "events": {},
      "links": {},
      "address": "0xa2Add253A9CCFdeBFd09d11496E334978fc4F1eb",
      "transactionHash": "0x411fde97904167f82d895827d7cca899e4643723de446814235d98027a4da215"
    }
  },
  "schemaVersion": "3.0.11",
  "updatedAt": "2019-07-11T17:16:08.928Z",
  "devdoc": {
    "author": "Brennan Fife",
    "details": "...",
    "methods": {},
    "title": "The PrizedLinkedContract.sol contract for DOXA"
  },
  "userdoc": {
    "methods": {},
    "notice": "..."
  }
}